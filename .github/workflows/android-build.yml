name: Android Build

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: write
      actions: write
    env:
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
      ANDROID_HOME: ${{ github.workspace }}/android-sdk

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Android SDK tools
        uses: android-actions/setup-android@v3

      - name: Ensure Android config directory
        run: mkdir -p ~/.android

      - name: Restore tracked debug keystore
        if: ${{ hashFiles('android-app/tools/debug-keystore/debug.keystore') != '' }}
        run: cp android-app/tools/debug-keystore/debug.keystore ~/.android/debug.keystore

      - name: Ensure debug keystore
        id: keystore
        run: |
          set -euo pipefail
          if [ -f "${HOME}/.android/debug.keystore" ]; then
            echo "created=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          android-app/tools/debug-keystore/ensure-debug-keystore.sh
          echo "created=true" >> "$GITHUB_OUTPUT"

      - name: Commit newly created debug keystore
        if: ${{ github.event_name == 'push' && steps.keystore.outputs.created == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          cp "${HOME}/.android/debug.keystore" android-app/tools/debug-keystore/debug.keystore
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add android-app/tools/debug-keystore/debug.keystore
          if git diff --cached --quiet; then
            echo "info: no keystore changes to commit"
            exit 0
          fi
          git commit -m "Add generated debug keystore [skip ci]"
          git push

      - name: Determine build version
        id: version
        run: |
          set -euo pipefail
          commit_count="$(git rev-list --count HEAD)"
          version="1.${commit_count}.0"
          echo "version=${version}" >> "$GITHUB_OUTPUT"
          echo "code=${commit_count}" >> "$GITHUB_OUTPUT"

      - name: Update Maven project version
        run: |
          set -euo pipefail
          ./mvnw -B versions:set -DnewVersion=${{ steps.version.outputs.version }} -DgenerateBackupPoms=false

      - name: Update Android versionCode property
        run: |
          set -euo pipefail
          ./mvnw -pl android-app -am -B versions:set-property -Dproperty=app.version.code -DnewVersion=${{ steps.version.outputs.code }} -DgenerateBackupPoms=false

      - name: Sync AndroidManifest version metadata
        run: |
          set -euo pipefail
          python3 android-app/tools/scripts/update_manifest_version.py \
            android-app/src/main/AndroidManifest.xml \
            "${{ steps.version.outputs.code }}" \
            "${{ steps.version.outputs.version }}"

      - name: Install Android platform tools
        run: |
          yes | sdkmanager --install "platforms;android-28" "build-tools;28.0.3"
          if [ -d "$ANDROID_SDK_ROOT/build-tools" ]; then
            find "$ANDROID_SDK_ROOT/build-tools" -mindepth 1 -maxdepth 1 -type d ! -name '28.0.3' -exec rm -rf {} +
          fi

      - name: Build with Maven Wrapper
        env:
          APP_VERSION_CODE: ${{ steps.version.outputs.code }}
        run: ./mvnw -B verify -Dapp.version.code=${APP_VERSION_CODE}

#      - name: Run API 28 installation smoke test
#        shell: bash
#        env:
#          AVD_NAME: ci-android-28
#        run: |
#          set -euxo pipefail
#          export ANDROID_HOME="$ANDROID_SDK_ROOT"
#          export PATH="$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/emulator:$PATH"
#
#          yes | sdkmanager --install "platforms;android-28" "system-images;android-28;google_apis;x86"
#
#          if avdmanager list avd | grep -q "${AVD_NAME}"; then
#            avdmanager delete avd -n "${AVD_NAME}"
#          fi
#
#          echo "no" | avdmanager create avd \
#            -n "${AVD_NAME}" \
#            -k "system-images;android-28;google_apis;x86" \
#            --device "pixel_3"
#
#          if [ ! -f "$HOME/.android/avd/${AVD_NAME}.ini" ]; then
#            echo "Failed to create AVD \"${AVD_NAME}\". Current AVD list:"
#            avdmanager list avd || true
#            exit 1
#          fi
#
#          emulator -avd "${AVD_NAME}" -no-window -no-audio -no-boot-anim &
#          EMULATOR_PID=$!
#          trap 'kill "${EMULATOR_PID}" 2>/dev/null || true' EXIT
#
#          if ! timeout 180s adb wait-for-device; then
#            echo "Emulator failed to become ready within 180 seconds"
#            exit 1
#          fi
#          adb shell 'while [ -z "$(getprop sys.boot_completed 2>/dev/null)" ]; do sleep 1; done'
#          adb shell input keyevent 82
#          adb emu kill

      - name: Upload APK artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: uqureader-apk
          path: android-app/target/uqureader-*.apk
          if-no-files-found: error

      - name: Prune old APK artifacts
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const artifactName = 'uqureader-apk';
            const keepLatest = 3;
            const { owner, repo } = context.repo;
            const artifacts = await github.paginate(
              github.rest.actions.listArtifactsForRepo,
              { owner, repo, per_page: 100 }
            );
            const matching = artifacts
              .filter(artifact => artifact.name === artifactName && !artifact.expired)
              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
            for (const artifact of matching.slice(keepLatest)) {
              core.info(`Deleting artifact ${artifact.id} created at ${artifact.created_at}`);
              await github.rest.actions.deleteArtifact({
                owner,
                repo,
                artifact_id: artifact.id,
              });
            }
