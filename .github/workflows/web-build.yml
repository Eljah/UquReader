name: Web Build

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write
      actions: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Build web module
        run: ./mvnw -pl web-app -am -B package

      - name: Assemble WAR artifact
        run: |
          set -euo pipefail
          JAR_PATH="$(ls web-app/target/web-app-*.jar | head -n 1)"
          if [ -z "${JAR_PATH}" ]; then
            echo "No JAR artifact produced for web-app module" >&2
            exit 1
          fi

          STAGING_DIR="web-app/target/war-staging"
          rm -rf "${STAGING_DIR}"
          mkdir -p "${STAGING_DIR}/WEB-INF/classes"

          cp "${JAR_PATH}" "${STAGING_DIR}/classes.jar"
          (cd "${STAGING_DIR}/WEB-INF/classes" && jar xf ../../classes.jar)
          rm "${STAGING_DIR}/classes.jar"

          if [ -d "${STAGING_DIR}/WEB-INF/classes/META-INF" ]; then
            mv "${STAGING_DIR}/WEB-INF/classes/META-INF" "${STAGING_DIR}/META-INF"
          fi

          if [ -d "web-app/src/main/webapp" ]; then
            cp -R web-app/src/main/webapp/. "${STAGING_DIR}/"
          fi

          WAR_PATH="${JAR_PATH%.jar}.war"
          (cd "${STAGING_DIR}" && jar -cf "../$(basename "${WAR_PATH}")" .)
          rm -rf "${STAGING_DIR}"

      - name: Upload WAR artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: uqureader-web-war
          path: web-app/target/web-app-*.war
          if-no-files-found: error

      - name: Prune old WAR artifacts
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const artifactName = 'uqureader-web-war';
            const keepLatest = 3;
            const { owner, repo } = context.repo;
            const artifacts = await github.paginate(
              github.rest.actions.listArtifactsForRepo,
              { owner, repo, per_page: 100 }
            );
            const matching = artifacts
              .filter(artifact => artifact.name === artifactName && !artifact.expired)
              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
            for (const artifact of matching.slice(keepLatest)) {
              core.info(`Deleting artifact ${artifact.id} created at ${artifact.created_at}`);
              await github.rest.actions.deleteArtifact({
                owner,
                repo,
                artifact_id: artifact.id,
              });
            }
